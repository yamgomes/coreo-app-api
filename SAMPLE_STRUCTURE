package com.example.coreographyapi;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class CoreographyApiApplication {

    public static void main(String[] args) {
        SpringApplication.run(CoreographyApiApplication.class, args);
    }
}

// Usuario model
package com.example.coreographyapi.model;

import javax.persistence.*;
import java.util.List;

@Entity
public class Usuario {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String usuarioname;

    private String email;

    @OneToMany(mappedBy = "creator", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<Coreography> coreographies;

    @ManyToMany
    @JoinTable(
        name = "usuario_followers",
        joinColumns = @JoinColumn(name = "usuario_id"),
        inverseJoinColumns = @JoinColumn(name = "follower_id")
    )
    private List<Usuario> followers;

    @ManyToMany(mappedBy = "followers")
    private List<Usuario> following;

    // Getters and Setters
}

// Coreography model
package com.example.coreographyapi.model;

import javax.persistence.*;
import java.util.List;

@Entity
public class Coreography {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String title;

    @ManyToOne
    @JoinColumn(name = "creator_id")
    private Usuario creator;

    @OneToMany(mappedBy = "coreography", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<Passo> passos;

    private boolean isPublic;

    // Getters and Setters
}

// Passo model
package com.example.coreographyapi.model;

import javax.persistence.*;

@Entity
public class Passo {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String description;

    private int order;

    @ManyToOne
    @JoinColumn(name = "coreography_id")
    private Coreography coreography;

    // Getters and Setters
}

// UsuarioRepository
package com.example.coreographyapi.repository;

import com.example.coreographyapi.model.Usuario;
import org.springframework.data.jpa.repository.JpaRepository;

public interface UsuarioRepository extends JpaRepository<Usuario, Long> {
}

// CoreographyRepository
package com.example.coreographyapi.repository;

import com.example.coreographyapi.model.Coreography;
import org.springframework.data.jpa.repository.JpaRepository;

public interface CoreographyRepository extends JpaRepository<Coreography, Long> {
}

// PassoRepository
package com.example.coreographyapi.repository;

import com.example.coreographyapi.model.Passo;
import org.springframework.data.jpa.repository.JpaRepository;

public interface PassoRepository extends JpaRepository<Passo, Long> {
}

// UsuarioController
package com.example.coreographyapi.controller;

import com.example.coreographyapi.model.Usuario;
import com.example.coreographyapi.repository.UsuarioRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/usuarios")
public class UsuarioController {

    @Autowired
    private UsuarioRepository usuarioRepository;

    @GetMapping
    public List<Usuario> getAllUsuarios() {
        return usuarioRepository.findAll();
    }

    @PostMapping
    public Usuario createUsuario(@RequestBody Usuario usuario) {
        return usuarioRepository.save(usuario);
    }

    @GetMapping("/{id}")
    public Usuario getUsuarioById(@PathVariable Long id) {
        return usuarioRepository.findById(id).orElse(null);
    }
}

// CoreographyController
package com.example.coreographyapi.controller;

import com.example.coreographyapi.model.Coreography;
import com.example.coreographyapi.repository.CoreographyRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/coreographies")
public class CoreographyController {

    @Autowired
    private CoreographyRepository coreographyRepository;

    @GetMapping
    public List<Coreography> getAllCoreographies() {
        return coreographyRepository.findAll();
    }

    @PostMapping
    public Coreography createCoreography(@RequestBody Coreography coreography) {
        return coreographyRepository.save(coreography);
    }

    @GetMapping("/{id}")
    public Coreography getCoreographyById(@PathVariable Long id) {
        return coreographyRepository.findById(id).orElse(null);
    }
}
