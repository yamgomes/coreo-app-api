package com.example.coreographyapi;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class CoreographyApiApplication {

    public static void main(String[] args) {
        SpringApplication.run(CoreographyApiApplication.class, args);
    }
}

// User model
package com.example.coreographyapi.model;

import javax.persistence.*;
import java.util.List;

@Entity
public class User {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String username;

    private String email;

    @OneToMany(mappedBy = "creator", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<Coreography> coreographies;

    @ManyToMany
    @JoinTable(
        name = "user_followers",
        joinColumns = @JoinColumn(name = "user_id"),
        inverseJoinColumns = @JoinColumn(name = "follower_id")
    )
    private List<User> followers;

    @ManyToMany(mappedBy = "followers")
    private List<User> following;

    // Getters and Setters
}

// Coreography model
package com.example.coreographyapi.model;

import javax.persistence.*;
import java.util.List;

@Entity
public class Coreography {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String title;

    @ManyToOne
    @JoinColumn(name = "creator_id")
    private User creator;

    @OneToMany(mappedBy = "coreography", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<Step> steps;

    private boolean isPublic;

    // Getters and Setters
}

// Step model
package com.example.coreographyapi.model;

import javax.persistence.*;

@Entity
public class Step {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String description;

    private int order;

    @ManyToOne
    @JoinColumn(name = "coreography_id")
    private Coreography coreography;

    // Getters and Setters
}

// UserRepository
package com.example.coreographyapi.repository;

import com.example.coreographyapi.model.User;
import org.springframework.data.jpa.repository.JpaRepository;

public interface UserRepository extends JpaRepository<User, Long> {
}

// CoreographyRepository
package com.example.coreographyapi.repository;

import com.example.coreographyapi.model.Coreography;
import org.springframework.data.jpa.repository.JpaRepository;

public interface CoreographyRepository extends JpaRepository<Coreography, Long> {
}

// StepRepository
package com.example.coreographyapi.repository;

import com.example.coreographyapi.model.Step;
import org.springframework.data.jpa.repository.JpaRepository;

public interface StepRepository extends JpaRepository<Step, Long> {
}

// UserController
package com.example.coreographyapi.controller;

import com.example.coreographyapi.model.User;
import com.example.coreographyapi.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/users")
public class UserController {

    @Autowired
    private UserRepository userRepository;

    @GetMapping
    public List<User> getAllUsers() {
        return userRepository.findAll();
    }

    @PostMapping
    public User createUser(@RequestBody User user) {
        return userRepository.save(user);
    }

    @GetMapping("/{id}")
    public User getUserById(@PathVariable Long id) {
        return userRepository.findById(id).orElse(null);
    }
}

// CoreographyController
package com.example.coreographyapi.controller;

import com.example.coreographyapi.model.Coreography;
import com.example.coreographyapi.repository.CoreographyRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/coreographies")
public class CoreographyController {

    @Autowired
    private CoreographyRepository coreographyRepository;

    @GetMapping
    public List<Coreography> getAllCoreographies() {
        return coreographyRepository.findAll();
    }

    @PostMapping
    public Coreography createCoreography(@RequestBody Coreography coreography) {
        return coreographyRepository.save(coreography);
    }

    @GetMapping("/{id}")
    public Coreography getCoreographyById(@PathVariable Long id) {
        return coreographyRepository.findById(id).orElse(null);
    }
}
